{
  "name": "restler",
  "version": "2.0.0",
  "description": "An HTTP client library for node.js",
  "contributors": [
    {
      "name": "Dan Webb",
      "email": "dan@danwebb.net"
    }
  ],
  "homepage": "https://github.com/danwrong/restler",
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/restler",
  "engines": {
    "node": ">= 0.6.x"
  },
  "dependencies": {},
  "devDependencies": {
    "nodeunit": ">=0.5.0",
    "xml2js": ">=0.1.0",
    "yaml": ">=0.2.0",
    "iconv": ">=1.0.0"
  },
  "readme": "Restler\n=======\n\n(C) Dan Webb (dan@danwebb.net/@danwrong) 2011, Licensed under the MIT-LICENSE\n\nAn HTTP client library for node.js (0.3 and up).  Hides most of the complexity of creating and using http.Client. Very early days yet.\n\n**Release 2.x.x** will be dedicated to modifying how errors are handled and emitted. Currently errors are being fired as an on 'error' event but as [@ctavan](https://github.com/ctavan) pointed out on [issue #36](https://github.com/danwrong/restler/pull/36) a better approach (and more commonly in vogue now) would be to pass the error obj to the callback.\n\nThs change will inevitably affect those using older < 0.2.x versions of restler. Those not ready to upgrade yet are encouraged to stay on the 0.2.x version.\n\nSee [Version History](https://github.com/danwrong/restler/wiki/Version-History) for changes\n\n\nFeatures\n--------\n\n* Easy interface for common operations via http.request\n* Automatic serialization of post data\n* Automatic serialization of query string data\n* Automatic deserialization of XML, JSON and YAML responses to JavaScript objects (if you have js-yaml and/or xml2js in the require path)\n* Provide your own deserialization functions for other datatypes\n* Automatic following of redirects\n* Send files with multipart requests\n* Transparently handle SSL (just specify https in the URL)\n* Deals with basic auth for you, just provide username and password options\n* Simple service wrapper that allows you to easily put together REST API libraries\n* Transparently handle content-encoded responses (gzip, deflate) (requires node 0.6+)\n* Transparently handle different content charsets via [iconv](https://github.com/bnoordhuis/node-iconv) (if available)\n\n\nAPI\n---\n\n### request(url, options)\n\nBasic method to make a request of any type. The function returns a RestRequest object that emits events:\n\n#### events\n\n* `complete: function(result, response)` - emitted when the request has finished whether it was successful or not. Gets passed the response result and the response object as arguments. If some error has occurred, `result` is always instance of `Error`, otherwise it contains response data.\n* `success: function(data, response)` - emitted when the request was successful. Gets passed the response data and the response object as arguments.\n* `fail: function(data, response)` - emitted when the request was successful, but 4xx status code returned. Gets passed the response data and the response object as arguments.\n* `error: function(err, response)` - emitted when some errors have occurred (eg. connection aborted, parse, encoding, decoding failed or some other unhandled errors). Gets passed the `Error` object and the response object (when available) as arguments.\n* `abort: function()` - emitted when `request.abort()` is called.\n* `2XX`, `3XX`, `4XX`, `5XX: function(data, response)` - emitted for all requests with response codes in the range (eg. `2XX` emitted for 200, 201, 203).\n* <code><i>actual response code</i>: function(data, response)</code> - emitted for every single response code (eg. 404, 201, etc).\n\n#### members\n\n* `abort([error])` Cancels request. `abort` event is emitted. `request.aborted` is set to `true`. If non-falsy `error` is passed, then `error` will be additionaly emitted (with `error` passed as a param and `error.type` is set to `\"abort\"`). Otherwise only `complete` event will raise.\n* `retry([timeout])` Re-sends request after `timeout` ms. Pending request is aborted.\n* `aborted` Determines if request was aborted.\n\n\n### get(url, options)\n\nCreate a GET request.\n\n### post(url, options)\n\nCreate a POST request.\n\n### put(url, options)\n\nCreate a PUT request.\n\n### del(url, options)\n\nCreate a DELETE request.\n\n### head(url, options)\n\nCreate a HEAD request.\n\n### json(url, data, options)\n\nSend json `data` via GET method.\n\n### postJson(url, data, options)\n\nSend json `data` via POST method.\n\n\n### Parsers\n\nYou can give any of these to the parsers option to specify how the response data is deserialized.\nIn case of malformed content, parsers emit `error` event. Original data returned by server is stored in `response.raw`.\n\n#### parsers.auto\n\nChecks the content-type and then uses parsers.xml, parsers.json or parsers.yaml.\nIf the content type isn't recognised it just returns the data untouched.\n\n#### parsers.json, parsers.xml, parsers.yaml\n\nAll of these attempt to turn the response into a JavaScript object. In order to use the YAML and XML parsers you must have yaml and/or xml2js installed.\n\n### Options\n\n* `method` Request method, can be get, post, put, del. Defaults to `\"get\"`.\n* `query` Query string variables as a javascript object, will override the querystring in the URL. Defaults to empty.\n* `data` The data to be added to the body of the request. Can be a string or any object.\nNote that if you want your request body to be JSON with the `Content-Type: application/json`, you need to\n`JSON.stringify` your object first. Otherwise, it will be sent as `application/x-www-form-urlencoded` and encoded accordingly.\nAlso you can use `json()` and `postJson()` methods.\n* `parser` A function that will be called on the returned data. Use any of predefined `restler.parsers`. See parsers section below. Defaults to `restler.parsers.auto`.\n* `encoding` The encoding of the request body. Defaults to `\"utf8\"`.\n* `decoding` The encoding of the response body. For a list of supported values see [Buffers](http://nodejs.org/docs/latest/api/buffers.html#buffers). Additionally accepts `\"buffer\"` - returns response as `Buffer`. Defaults to `\"utf8\"`.\n* `headers` A hash of HTTP headers to be sent. Defaults to `{ 'Accept': '*/*', 'User-Agent': 'Restler for node.js' }`.\n* `username` Basic auth username. Defaults to empty.\n* `password` Basic auth password. Defaults to empty.\n* `multipart` If set the data passed will be formated as `multipart/form-encoded`. See multipart example below. Defaults to `false`.\n* `client` A http.Client instance if you want to reuse or implement some kind of connection pooling. Defaults to empty.\n* `followRedirects` If set will recursively follow redirects. Defaults to `true`.\n\n\nExample usage\n-------------\n\n```javascript\nvar sys = require('util'),\n    rest = require('./restler');\n\nrest.get('http://google.com').on('complete', function(result) {\n  if (result instanceof Error) {\n    sys.puts('Error: ' + result.message);\n    this.retry(5000); // try again after 5 sec\n  } else {\n    sys.puts(result);\n  }\n});\n\nrest.get('http://twaud.io/api/v1/users/danwrong.json').on('complete', function(data) {\n  sys.puts(data[0].message); // auto convert to object\n});\n\nrest.get('http://twaud.io/api/v1/users/danwrong.xml').on('complete', function(data) {\n  sys.puts(data[0].sounds[0].sound[0].message); // auto convert to object\n});\n\nrest.post('http://user:pass@service.com/action', {\n  data: { id: 334 },\n}).on('complete', function(data, response) {\n  if (response.statusCode == 201) {\n    // you can get at the raw response like this...\n  }\n});\n\n// multipart request sending a file and using https\nrest.post('https://twaud.io/api/v1/upload.json', {\n  multipart: true,\n  username: 'danwrong',\n  password: 'wouldntyouliketoknow',\n  data: {\n    'sound[message]': 'hello from restler!',\n    'sound[file]': rest.file('doug-e-fresh_the-show.mp3', null, null, null, 'audio/mpeg')\n  }\n}).on('complete', function(data) {\n  sys.puts(data.audio_url);\n});\n\n// create a service constructor for very easy API wrappers a la HTTParty...\nTwitter = rest.service(function(u, p) {\n  this.defaults.username = u;\n  this.defaults.password = p;\n}, {\n  baseURL: 'http://twitter.com'\n}, {\n  update: function(message) {\n    return this.post('/statuses/update.json', { data: { status: message } });\n  }\n});\n\nvar client = new Twitter('danwrong', 'password');\nclient.update('Tweeting using a Restler service thingy').on('complete', function(data) {\n  sys.p(data);\n});\n\n// post JSON\nvar jsonData = { id: 334 };\nrest.postJson('http://example.com/action', jsonData).on('complete', function(data, response) {\n  // handle response\n});\n\n```\n\nRunning the tests\n-----------------\ninstall **[nodeunit](https://github.com/caolan/nodeunit)**\n\n```bash\nnpm install nodeunit\n```\n\nthen\n\n```bash\nnode test/all.js\n```\n\nor\n\n```bash\nnodeunit test/restler.js\n```\n\nTODO\n----\n* What do you need? Let me know or fork.\n",
  "readmeFilename": "README.md",
  "_id": "restler@2.0.0",
  "_from": "restler@2.0.0"
}
